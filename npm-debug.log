0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.10.10
3 info using node@v6.9.5
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/rsamuel/MEGAsync/developer_mobile/woopra/sdks/node-woopra',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/rsamuel/.npm/woopra/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/rsamuel/.npm correctMkdir not in flight; initializing
10 info lifecycle woopra@1.0.0~prepublish: woopra@1.0.0
11 silly lifecycle woopra@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/rsamuel/.npm/woopra/1.0.0/package.tgz',
12 verbose tar pack   '/Users/rsamuel/MEGAsync/developer_mobile/woopra/sdks/node-woopra' ]
13 verbose tarball /Users/rsamuel/.npm/woopra/1.0.0/package.tgz
14 verbose folder /Users/rsamuel/MEGAsync/developer_mobile/woopra/sdks/node-woopra
15 verbose addLocalTarball adding from inside cache /Users/rsamuel/.npm/woopra/1.0.0/package.tgz
16 verbose correctMkdir /Users/rsamuel/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd woopra@1.0.0
18 verbose afterAdd /Users/rsamuel/.npm/woopra/1.0.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/rsamuel/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/rsamuel/.npm/woopra/1.0.0/package/package.json written
21 silly publish { name: 'woopra',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'Real-time customer analytics',
21 silly publish   main: 'index.js',
21 silly publish   typings: 'index.d.ts',
21 silly publish   scripts: { test: 'mocha' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/woopra/node-woopra.git' },
21 silly publish   keywords: [ 'analytics', 'woopra', 'customer', 'analytics', 'realtime' ],
21 silly publish   contributors:
21 silly publish    [ { name: 'Paulius Uza', email: 'pauliusuza@gmail.com' },
21 silly publish      { name: 'Ralph Samuel', email: 'ralph@woopra.com' } ],
21 silly publish   author: { name: 'Billy Vong' },
21 silly publish   license: 'ISC',
21 silly publish   bugs: { url: 'https://github.com/woopra/node-woopra/issues' },
21 silly publish   homepage: 'https://github.com/woopra/node-woopra',
21 silly publish   devDependencies:
21 silly publish    { '@types/node': '^6.0.55',
21 silly publish      mocha: '^3.0.2',
21 silly publish      should: '^11.1.0',
21 silly publish      sinon: '^1.10.3' },
21 silly publish   readme: 'node-woopra ![Travis CI](https://travis-ci.org/Woopra/node-woopra.svg?branch=master)\n===========\n\nnodejs library for Woopra\n\n**Please Note:** This library is not functional on the client side.  This means for example, that attempting to use browserify, etc. to use this library on the front end will result in cors errors.  There are probably other errors you can run in to if you attempt this setup.\n\n## Installation\n\n```\n$ npm install woopra\n```\n\n\n## Usage\n\n```javascript\nvar Woopra = require(\'woopra\');\n \n// Replace projectKey with your project key (generally your website name)\n// `options` is an object, currently the only option supported is ssl: <true|false> (default: true)\nvar woopra = new Woopra(\'projectKey\', options);\n```\n\nAlternatively, you can configure the tracker after initialization by calling `config(options)`\n\n```javascript\nwoopra.config({\n    ssl: true\n});\n```\n\nYou *must* identify your users before tracking. Use the `identify(uid, properties)` method to attach a unique ID (we highly recommend using e-mails to get the most out of AppConnect), as well as other visitor properties.\n\nYour custom visitor data will not be pushed until you send your first custom event. In order to push your identify without sending a custom event, use the `push` method.\n\n```javascript\nwoopra.identify(\'user@id.com\', {\n    visitor_property: \'property\'\n}).push();\n```\n\nTo send a custom event, use `track(eventName, properties)`\n\n```javascript\nwoopra.track(\'eventName\', {\n    event_property: \'property\'\n});\n```\n\nTrack event accepts an optional callback with error and HTTP response code parameters\n\n```javascript\nwoopra.track(\'eventName\', {\n    eventProperty: \'property\'\n}, function(err, response) {\n\tif(err) throw err;\n\tconsole.log(\'Tracking Response: Code: %s, Body: %j\', response.responseCode, response.body); //200 if OK\n});\n```\n\n#### Note: All event and property names should be lowercase\n\n## TypeScript Support\nTypeScript definitions have been included in this library for convenience.  Woopra has not fully tested the functionality of the defined types, so use with a little caution, and submit an issue or better, a pull request if you notice any issues at all.\n\n\n## Methods\n\n## .config(options)\nSets some configuration options.\n\n* `options` - object with the following available keys:\n\n key    | type   | description\n ------ | ------ | -----------\nssl | boolean | Use SSL for tracking requests.  SSL is not supported for Basic accounts.  (default: true)\n\n## .client(options)\nSets some client configuration values.  These values are similar to custom visitor properties, but handled by Woopra in a different way.\n\n* `options` - object with the following keys:\n\n key    | type   | description\n ------ | ------ | -----------\n screen | string | Visitor\'s browser\'s resolution in format of `<width>x<height>` (i.e. \'1024x768\')\nlanguage | string | Language of the visitor (i.e. from client-side javascript: window.navigator.language)\nreferer | string | Referrer of visitor (i.e. from client-side javascript: document.referrer)\ncookie | string | Session ID of the visitor.  Generally this is a cookie value from the browser, but it can be any ID you use to identify the visitor throughout a series of requests.  This should ONLY be used to identify anonymous users, otherwise use `identify()`.\nip | string | IP Address of the visitor.  (Use `0.0.0.0` if the server is performing an action on behalf of the user (subject to change))\n\n## .identify(id, properties)\nSets visitor properties for the current visitor.  Does not send the properties unless `track` or `push` is called.  Returns an instance of the tracker so that you can chain methods.\n\n* `id` - The unique identifier of the visitor.  We highly recommend you use the email of the visitor in order to get the most out of AppConnect\n* `properties` - key/value object for any custom visitor properties you want to associate with the visitor. \n\n## .push()\nSends a request to Woopra that only includes any client and visitor data.  This can be used to identify a visitor without generating a tracking event.\n\n## .track(eventName, properties, [options, [callback]])\nTracks an event.\n\n* `eventName` - The name of the event that you want to track\n* `properties` - key/value object for any custom event properties to associate with the event\n* `options` Hash of event metadata properties to track (ie: timestamp)\n* `callback` - Callback function after the `track` request succeeds.\n\nThe `properties` object takes any custom event properties you want.  For instance `sale_amount`, or `product_name`.\n\nThe `options` object is for event metadata.  It currently accepts `timestamp` which should be in unix ms since epoch UTC, as well as `referer` which must be a url string and must include the protocol (eg: `http://`)\n\nThe `callback` will be called once the tacking servers have processed and responded to your track request.\n\n#Changes\nAfter version 0.3.0, the callbacks passed to `track()` and `push()` will be called with the entire http.IncomingMessage response object, rather than just the status code.\n\n\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '93a98c50d79a3dacfe80fbf2f08626b5f9df94f9',
21 silly publish   _id: 'woopra@1.0.0',
21 silly publish   _shasum: 'ee4fbc99d1f6df6578f0be7c28d618a07d067e0e',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name woopra
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'woopra',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'woopra',
26 silly mapToRegistry   name: 'woopra',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/woopra
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/rsamuel/.npm/woopra/1.0.0/package.tgz
30 verbose request uri https://registry.npmjs.org/woopra
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 3:40:16 PM
33 verbose request using bearer token for auth
34 verbose request id 071a8ad4a84c8301
35 http request PUT https://registry.npmjs.org/woopra
36 http 403 https://registry.npmjs.org/woopra
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Tue, 01 Aug 2017 22:40:16 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-sjc3133-SJC',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1501627216.240489,VS0,VE129',
37 verbose headers   vary: 'Accept-Encoding, Accept' }
38 verbose request invalidating /Users/rsamuel/.npm/registry.npmjs.org/woopra on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : woopra
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid woopra
43 verbose cwd /Users/rsamuel/MEGAsync/developer_mobile/woopra/sdks/node-woopra
44 error Darwin 16.6.0
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
46 error node v6.9.5
47 error npm  v3.10.10
48 error code E403
49 error "You cannot publish over the previously published version 1.0.0." : woopra
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
